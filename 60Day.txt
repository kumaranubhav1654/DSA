Headers {
#include <bits/stdc++.h>
using namespace std;
}

1. Two Sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int , int>m;
        vector<int>ans;
        for(int i=0;i!=nums.size();i++){
          
            int tmp=target-nums[i];
        if(m.find(tmp)!=m.end()){
         ans.push_back(i);
         ans.push_back(m[tmp]);
         break;
        }
          m[nums[i]]=i;
        }
        return ans;
    }
};

2.Valid Parenthesis

class Solution {
public:
    bool isValid(string s) {
        stack<char>st;
        if(s.length()%2!=0)
        return false;
        for(int i=0;i!=s.length();i++){
            if(s[i]=='(' || s[i]=='['|| s[i]=='{'){
                st.push(s[i]);
            }
            else{
                if(st.empty())
                return false;
                else if(s[i]==')' && st.top()=='('){
                    st.pop();
                }
                else if(s[i]=='}' && st.top()=='{'){
                    st.pop();
                }
                else if(s[i]==']' && st.top()=='['){
                    st.pop();
                }
                else
                return false;
            }
        }
        if(st.empty())
        return true;
        else return false;
        
    }
};

3.Best time to buy and sell

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()==0)
        return 0;
        int min=prices[0];
        //int max=0;
        int profit=0;
        for(int i=1;i!=prices.size();i++){
          if(prices[i]<min)
          min=prices[i];
          else{
              if(prices[i]-min>profit)
              profit=prices[i]-min;
          }
        }
        return profit;
    }
};

4. Merge two sorted linked list
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
       ListNode* ans=new ListNode(0);;
       ListNode* head=ans;
       while((list1!=NULL) && (list2!=NULL)){    //(list1->next!=NULL) && (list2->next!=NULL) dosent work if list1/2 = []
       if(list1->val<list2->val){
           ans->next=new ListNode(list1->val);
           list1=list1->next;
           ans=ans->next;
       }
       else{
           ans->next=new ListNode(list2->val);
           list2=list2->next;
           ans=ans->next;
       }
       }
       if(list1!=NULL)
       ans->next=list1;
       if(list2!=NULL)
       ans->next=list2;
       return head->next;
    }
};

5. Valid Palindrome

class Solution {
public:
    bool isPalindrome(string s) {
        char a;
        char b;
        int j=s.length()-1;
        int i=0;
        while(i<j){
            while((i < j) && !isalnum(s[i])){      //isalnum is for Alphanumeric #include<ctype.h>
                ++i;                              //else we have to "(s[i]>='a' && s[i]<='z' || s[i]>='A' && s[i]<='Z')" = "isalnum(s[i])"
            }
             while((i < j) && !isalnum(s[j])){
                --j;
            }
             a=tolower(s[i]);
             b=tolower(s[j]);
            cout<<i<<" "<<a<<" "<<j<<" "<<b<<" ";
            if(a!=b)
            return false;
            i++;
            j--;
        }

        return true;
    }
};

6. Invert Binary tree

class Solution {
public:
  TreeNode* invertTree(TreeNode* root) {
    if(root==NULL)return NULL;
    invertTree(root->left);
    invertTree(root->right);

    TreeNode* tmp=root->right;
    root->right=root->left;
    root->left=tmp;

    return root;
    }
};

7. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
        map<char,int>m;
        if(s.length()!=t.length())
        return false;

        for(int i=0;i!=s.length();i++){
           m[s[i]]++;
           m[t[i]]--;
           if(m[s[i]]==0)
           m.erase(s[i]);
           if(m[t[i]]==0)
           m.erase(t[i]);
        }
        if(m.empty())
        return true;
        else return false;
    }
};

8. Binary Search

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int length=nums.size()-1;
        int end=length;
        int start=0;
        int mid=(start+end)/2;
        while(nums[mid]!=target && start<end){
           if(nums[mid]<target){
            start=mid+1;
           }
           else{
            end=mid-1;
           }
         mid=(start+end)/2;
        }
        if(nums[mid]==target)
        return mid;
        else return -1;
    }
};

9. Level Order:

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        queue<TreeNode*>q;
        TreeNode* tmp;
        if(root==NULL)
        return ans;
        q.push(root);
        q.push(NULL);
        vector<int>t;
        while(!q.empty()){
            if(q.front()==NULL){
            q.pop();
            ans.push_back(t);
            t.clear();
            if(!q.empty())
            q.push(NULL); 
            }
            else{
            tmp = q.front();
            q.pop();
            t.push_back(tmp->val);
            if(tmp->left!=NULL)
            q.push(tmp->left);
            if(tmp->right!=NULL)
            q.push(tmp->right);
         }
        }
   return ans;
    }
};

9. Balanced Binary tree


class Solution {
public:
    int heightTree(TreeNode* root){
        if(root==NULL)
        return 0;
       return max(heightTree(root->left),heightTree(root->right))+1;
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
        return true;
        int Rh=heightTree(root->right);
        int Lh=heightTree(root->left);
        // cout<<abs(Rh-Lh)<<" ";
        if(abs(Rh-Lh)>1)
        return false;
       if(!isBalanced(root->right) || !isBalanced(root->left))
       return false;

        return true;
    }
};

10.Diameter of a Binarytree
O(n^2)Solution
class Solution {
public:
int heightTree(TreeNode* root){
    if (root==NULL)
    return 0;
    return max(heightTree(root->left),heightTree(root->right))+1;
}
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
        return 0;
       int leftHeight=heightTree(root->left);
       int rightHeight=heightTree(root->right);
       int leftDiameter= diameterOfBinaryTree(root->left);
       int rightDiameter= diameterOfBinaryTree(root->right);  
       int currentDiameter=leftHeight+rightHeight;
        return max(currentDiameter,max(leftDiameter,rightDiameter));      
    }
};

O(N) solution:
class Solution {
public:
    int res = 0;
    int maxDiameter( TreeNode *root) {
        if(root==NULL)return 0;
        int l = maxDiameter(root->left);
        int r = maxDiameter(root->right);
        res = max(res, l+r+1);
        return max(l,r)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        maxDiameter(root);
        return res-1;
    }
};


11. LCA of a binary tree

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL || p==root ||q==root)
        return root;
      TreeNode* left=  lowestCommonAncestor(root->left,p,q);
      TreeNode* right=  lowestCommonAncestor(root->right,p,q);

      if(left==NULL)
      return right;
      else if(right==NULL)
      return left;
      else
      return root;
    }
};

12. Linked list cycle
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL || head->next==NULL)
        return false;
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(slow!=fast && fast->next!=NULL && fast->next->next!=NULL){
         slow=slow->next;
         fast=fast->next->next;
         if(slow==fast)
         break;
        }
        if(slow==fast)
        return true;
        else
        return false;

    }
};

13. First bad version
class Solution {
public:
    int firstBadVersion(int n) {
           long long int start=1;
        if(isBadVersion(start))
        return start;
           long long int end=n;
        long long int mid=n/2;
        while(!isBadVersion(mid)||isBadVersion(mid-1)){
         if(isBadVersion(mid))
         end=mid;
         else
         start=mid+1;    
         mid=(end+start)/2;
        }
        return mid;
    }
};

14. Ransom Note

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        if(magazine.length()<ransomNote.length())
        return false;
       sort(ransomNote.begin(),ransomNote.end());
       sort(magazine.begin(),magazine.end());
       int j=0;
       int i=0;
        while(i!=ransomNote.length()&&j!=magazine.length()){
            if(ransomNote[i]==magazine[j]){
                i++;
                j++;
            }
            else if(ransomNote[i]>magazine[j])
            j++;
            else
            return false;
        }
        if(i==ransomNote.length())
        return true;
        else return false;
    }
};

15. Mid of linked list
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head==NULL || head->next==NULL)
        return head;
       ListNode* mid=head;
       ListNode* end=head;
         while(end->next!=NULL && end->next->next!=NULL){
          end=end->next->next;
          mid=mid->next;
         }
        if(end->next==NULL)
        return mid;
        else
        return mid->next;
    }
};

16. Longest Substring Without Repeating Characters

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.length()==0 || s.length()==1)
        return s.length();
        map<char,int>m;
        int ans=0;
        int finalAns=0;
        int start=0;
        for(int i=0;i!=s.length();i++){
            if(m[s[i]]){
                if(start<m[s[i]]){
                  start=m[s[i]];
                  ans=i-start+1;
                }
               else{
               ans++;
               }     
               m[s[i]]=i+1;          
            }
            else{
            m[s[i]]=i+1;
            ans++;
            }
         finalAns=max(ans,finalAns);
        // cout<<ans<<" ";
        }
     return finalAns;
    }
};

17.
